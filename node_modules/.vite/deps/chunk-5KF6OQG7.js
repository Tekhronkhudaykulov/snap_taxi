import {
  __commonJS
} from "./chunk-J43GMYXM.js";

// node_modules/reactotron-core-client/dist/index.js
var require_dist = __commonJS({
  "node_modules/reactotron-core-client/dist/index.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _typeof(a) {
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(a2) {
        return typeof a2;
      } : function(a2) {
        return a2 && "function" == typeof Symbol && a2.constructor === Symbol && a2 !== Symbol.prototype ? "symbol" : typeof a2;
      }, _typeof(a);
    }
    function _classCallCheck(a, b) {
      if (!(a instanceof b))
        throw new TypeError("Cannot call a class as a function");
    }
    function _defineProperties(a, b) {
      for (var c, d = 0; d < b.length; d++)
        c = b[d], c.enumerable = c.enumerable || false, c.configurable = true, "value" in c && (c.writable = true), Object.defineProperty(a, c.key, c);
    }
    function _createClass(a, b, c) {
      return b && _defineProperties(a.prototype, b), c && _defineProperties(a, c), a;
    }
    function _defineProperty(a, b, c) {
      return b in a ? Object.defineProperty(a, b, { value: c, enumerable: true, configurable: true, writable: true }) : a[b] = c, a;
    }
    function ownKeys(a, b) {
      var c = Object.keys(a);
      if (Object.getOwnPropertySymbols) {
        var d = Object.getOwnPropertySymbols(a);
        b && (d = d.filter(function(b2) {
          return Object.getOwnPropertyDescriptor(a, b2).enumerable;
        })), c.push.apply(c, d);
      }
      return c;
    }
    function _objectSpread2(a) {
      for (var b, c = 1; c < arguments.length; c++)
        b = null == arguments[c] ? {} : arguments[c], c % 2 ? ownKeys(Object(b), true).forEach(function(c2) {
          _defineProperty(a, c2, b[c2]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(a, Object.getOwnPropertyDescriptors(b)) : ownKeys(Object(b)).forEach(function(c2) {
          Object.defineProperty(a, c2, Object.getOwnPropertyDescriptor(b, c2));
        });
      return a;
    }
    function _toConsumableArray(a) {
      return _arrayWithoutHoles(a) || _iterableToArray(a) || _nonIterableSpread();
    }
    function _arrayWithoutHoles(a) {
      if (Array.isArray(a)) {
        for (var b = 0, c = Array(a.length); b < a.length; b++)
          c[b] = a[b];
        return c;
      }
    }
    function _iterableToArray(a) {
      if (Symbol.iterator in Object(a) || "[object Arguments]" === Object.prototype.toString.call(a))
        return Array.from(a);
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance");
    }
    var isCreateSocketValid = function(a) {
      return "undefined" != typeof a && null !== a;
    };
    var isHostValid = function(a) {
      return "string" == typeof a && a && "" !== a;
    };
    var isPortValid = function(a) {
      return "number" == typeof a && 1 <= a && 65535 >= a;
    };
    var onCommandValid = function(a) {
      return "function" == typeof a;
    };
    var validate = function(a) {
      var b = a.createSocket, c = a.host, d = a.port, e = a.onCommand;
      if (!isCreateSocketValid(b))
        throw new Error("invalid createSocket function");
      if (!isHostValid(c))
        throw new Error("invalid host");
      if (!isPortValid(d))
        throw new Error("invalid port");
      if (!onCommandValid(e))
        throw new Error("invalid onCommand handler");
    };
    var logger = function() {
      return function(a) {
        return { features: { log: function() {
          for (var b = arguments.length, c = Array(b), d = 0; d < b; d++)
            c[d] = arguments[d];
          var e = c && 1 === c.length ? c[0] : c;
          a.send("log", { level: "debug", message: e }, false);
        }, logImportant: function() {
          for (var b = arguments.length, c = Array(b), d = 0; d < b; d++)
            c[d] = arguments[d];
          var e = c && 1 === c.length ? c[0] : c;
          a.send("log", { level: "debug", message: e }, true);
        }, debug: function(b) {
          var c = !!(1 < arguments.length && arguments[1] !== void 0) && arguments[1];
          return a.send("log", { level: "debug", message: b }, !!c);
        }, warn: function(b) {
          return a.send("log", { level: "warn", message: b }, true);
        }, error: function(b, c) {
          return a.send("log", { level: "error", message: b, stack: c }, true);
        } } };
      };
    };
    var image = function() {
      return function(a) {
        return { features: { image: function(b) {
          var c = b.uri, d = b.preview, e = b.filename, f = b.width, g = b.height, h = b.caption;
          return a.send("image", { uri: c, preview: d, filename: e, width: f, height: g, caption: h });
        } } };
      };
    };
    var benchmark = function() {
      return function(a) {
        var b = a.startTimer;
        return { features: { benchmark: function(c) {
          var d = [], e = b(), f = function(a2) {
            var b2 = 0 === d.length ? 0 : d[d.length - 1].time, c2 = e();
            d.push({ title: a2, time: c2, delta: c2 - b2 });
          };
          d.push({ title: c, time: 0, delta: 0 });
          var g = function(b2) {
            f(b2), a.send("benchmark.report", { title: c, steps: d });
          };
          return { step: f, stop: g, last: g };
        } } };
      };
    };
    var stateResponses = function() {
      return function(a) {
        return { features: { stateActionComplete: function(b, c) {
          var d = !!(2 < arguments.length && arguments[2] !== void 0) && arguments[2];
          return a.send("state.action.complete", { name: b, action: c }, !!d);
        }, stateValuesResponse: function(b, c) {
          var d = !(2 < arguments.length && arguments[2] !== void 0) || arguments[2];
          return a.send("state.values.response", { path: b, value: c, valid: d });
        }, stateKeysResponse: function(b, c) {
          var d = !(2 < arguments.length && arguments[2] !== void 0) || arguments[2];
          return a.send("state.keys.response", { path: b, keys: c, valid: d });
        }, stateValuesChange: function(b) {
          return 0 < b.length && a.send("state.values.change", { changes: b });
        }, stateBackupResponse: function(b) {
          return a.send("state.backup.response", { state: b });
        } } };
      };
    };
    var apiResponse = function() {
      return function(a) {
        return { features: { apiResponse: function(b, c, d) {
          var e = c && c.status && "number" == typeof c.status && 200 <= c.status && 299 >= c.status;
          a.send("api.response", { request: b, response: c, duration: d }, !e);
        } } };
      };
    };
    var clear = function() {
      return function(a) {
        return { features: { clear: function() {
          return a.send("clear");
        } } };
      };
    };
    var repl = function() {
      return function(reactotron) {
        var myRepls = {};
        return { onCommand: function(_ref) {
          var type = _ref.type, payload = _ref.payload;
          if ("repl." === type.substr(0, 5))
            switch (type.substr(5)) {
              case "ls":
                reactotron.send("repl.ls.response", Object.keys(myRepls));
                break;
              case "execute":
                reactotron.send("repl.execute.response", function() {
                  return eval(payload);
                }.call(myRepls));
            }
        }, features: { repl: function(a, b) {
          if (!a)
            throw new Error("You must provide a name for your REPL");
          if (myRepls[a])
            throw new Error("You are already REPLing an item with that name");
          myRepls[a] = b;
        } } };
      };
    };
    var UNDEFINED = "~~~ undefined ~~~";
    var NULL = "~~~ null ~~~";
    var FALSE = "~~~ false ~~~";
    var ZERO = "~~~ zero ~~~";
    var EMPTY_STRING = "~~~ empty string ~~~";
    var CIRCULAR = "~~~ Circular Reference ~~~";
    var ANONYMOUS = "~~~ anonymous function ~~~";
    var INFINITY = "~~~ Infinity ~~~";
    var NEGATIVE_INFINITY = "~~~ -Infinity ~~~";
    function getFunctionName(a) {
      var b = a.name;
      return null === b || void 0 === b || "" === b ? ANONYMOUS : "~~~ ".concat(b, "() ~~~");
    }
    function serialize(a) {
      var b = !!(1 < arguments.length && arguments[1] !== void 0) && arguments[1], c = [];
      return JSON.stringify(a, function(a2) {
        return function(d, e) {
          if (true === e)
            return true;
          if (e === 1 / 0)
            return INFINITY;
          if (e === -Infinity)
            return NEGATIVE_INFINITY;
          if (0 === e)
            return ZERO;
          if (void 0 === e)
            return UNDEFINED;
          if (null === e)
            return NULL;
          if (false === e)
            return FALSE;
          if (-0 === e)
            return ZERO;
          if ("" === e)
            return EMPTY_STRING;
          if (b && "object" === _typeof(e) && e.nativeEvent)
            return e.nativeEvent;
          switch (_typeof(e)) {
            case "string":
              return e;
            case "number":
              return e;
            case "function":
              return getFunctionName(e);
          }
          if (e[Symbol.iterator] && !Array.isArray(e))
            return _toConsumableArray(e);
          if (0 < c.length) {
            var f = c.indexOf(this);
            ~f ? c.splice(f + 1) : c.push(this), ~c.indexOf(e) && (e = CIRCULAR);
          } else
            c.push(e);
          return null == a2 ? e : a2.call(this, d, e);
        };
      }(null));
    }
    var defaultPerformanceNow = function() {
      return Date.now();
    };
    var nativePerformance = "undefined" != typeof window && window && (window.performance || window.msPerformance || window.webkitPerformance);
    var performanceNow = defaultPerformanceNow;
    var delta = function(a) {
      return performanceNow() - a;
    };
    global.nativePerformanceNow ? performanceNow = global.nativePerformanceNow : nativePerformance && (performanceNow = function() {
      return nativePerformance.now && nativePerformance.now();
    });
    var start = function() {
      var a = performanceNow();
      return function() {
        return delta(a);
      };
    };
    var corePlugins = [image(), logger(), benchmark(), stateResponses(), apiResponse(), clear(), repl()];
    var DEFAULT_OPTIONS = { createSocket: null, host: "localhost", port: 9090, name: "reactotron-core-client", secure: false, plugins: corePlugins, safeRecursion: true, onCommand: function() {
      return null;
    }, onConnect: function() {
      return null;
    }, onDisconnect: function() {
      return null;
    } };
    var reservedFeatures = ["options", "connected", "socket", "plugins", "configure", "connect", "send", "use", "startTimer"];
    var isReservedFeature = function(a) {
      return reservedFeatures.some(function(b) {
        return b === a;
      });
    };
    function emptyPromise() {
      return Promise.resolve("");
    }
    (function(a) {
      a.String = "string";
    })(exports.ArgType || (exports.ArgType = {}));
    var ReactotronImpl = function() {
      function a() {
        var b = this;
        _classCallCheck(this, a), _defineProperty(this, "options", Object.assign({}, DEFAULT_OPTIONS)), _defineProperty(this, "connected", false), _defineProperty(this, "socket", null), _defineProperty(this, "plugins", []), _defineProperty(this, "sendQueue", []), _defineProperty(this, "isReady", false), _defineProperty(this, "lastMessageDate", new Date()), _defineProperty(this, "customCommands", []), _defineProperty(this, "customCommandLatestId", 1), _defineProperty(this, "startTimer", function() {
          return start();
        }), _defineProperty(this, "send", function(a2) {
          var c = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {}, d = !!(2 < arguments.length && void 0 !== arguments[2]) && arguments[2], e = new Date(), f = e.getTime() - b.lastMessageDate.getTime();
          0 > f && (f = 0), b.lastMessageDate = e;
          var g = { type: a2, payload: c, important: !!d, date: e.toISOString(), deltaTime: f }, h = serialize(g, b.options.proxyHack);
          if (b.isReady)
            try {
              b.socket.send(h);
            } catch (a3) {
              b.isReady = false, console.log("An error occured communicating with reactotron. Please reload your app");
            }
          else
            b.sendQueue.push(h);
        });
      }
      return _createClass(a, [{ key: "configure", value: function() {
        var a2 = this, b = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {}, c = Object.assign({}, this.options, b);
        return validate(c), this.options = c, Array.isArray(this.options.plugins) && this.options.plugins.forEach(function(b2) {
          return a2.use(b2);
        }), this;
      } }, { key: "close", value: function() {
        this.connected = false, this.socket && this.socket.close && this.socket.close();
      } }, { key: "connect", value: function() {
        var a2 = this;
        this.connected = true;
        var b = this.options, c = b.createSocket, d = b.secure, e = b.host, f = b.environment, g = b.port, i = b.name, j = b.client, k = void 0 === j ? {} : j, l = b.getClientId, m = this.options, n = m.onCommand, o = m.onConnect, p = m.onDisconnect, q = d ? "wss" : "ws", r = c("".concat(q, "://").concat(e, ":").concat(g)), s = function() {
          o && o(), a2.plugins.forEach(function(a3) {
            return a3.onConnect && a3.onConnect();
          });
          (l || emptyPromise)().then(function(b2) {
            for (a2.isReady = true, a2.send("client.intro", _objectSpread2({ environment: f }, k, { name: i, clientId: b2, reactotronCoreClientVersion: "2.8.8" })); 0 < a2.sendQueue.length; ) {
              var c2 = a2.sendQueue[0];
              a2.sendQueue = a2.sendQueue.slice(1), a2.socket.send(c2);
            }
          });
        }, t = function() {
          a2.isReady = false, p && p(), a2.plugins.forEach(function(a3) {
            return a3.onDisconnect && a3.onDisconnect();
          });
        }, u = function(b2) {
          var c2 = "string" == typeof b2 ? JSON.parse(b2) : b2;
          n && n(c2), a2.plugins.forEach(function(a3) {
            return a3.onCommand && a3.onCommand(c2);
          }), "custom" === c2.type ? a2.customCommands.filter(function(a3) {
            return "string" == typeof c2.payload ? a3.command === c2.payload : a3.command === c2.payload.command;
          }).forEach(function(a3) {
            return a3.handler("object" === _typeof(c2.payload) ? c2.payload.args : void 0);
          }) : "setClientId" === c2.type && a2.options.setClientId && a2.options.setClientId(c2.payload);
        };
        return r.on ? (r.on("open", s), r.on("close", t), r.on("message", u)) : (r.onopen = s, r.onclose = t, r.onmessage = function(a3) {
          return u(a3.data);
        }), this.socket = r, this;
      } }, { key: "display", value: function() {
        var a2 = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {}, b = a2.name, c = a2.value, d = a2.preview, e = a2.image, f = a2.important;
        this.send("display", { name: b, value: c || null, preview: d || null, image: e || null }, void 0 !== f && f);
      } }, { key: "reportError", value: function(a2) {
        this.error(a2);
      } }, { key: "use", value: function(a2) {
        var b = this;
        if ("function" != typeof a2)
          throw new Error("plugins must be a function");
        var c = a2.bind(this)(this);
        if ("object" !== _typeof(c))
          throw new Error("plugins must return an object");
        if (c.features) {
          if ("object" !== _typeof(c.features))
            throw new Error("features must be an object");
          var d = function(a3) {
            var d2 = c.features[a3];
            if ("function" != typeof d2)
              throw new Error("feature ".concat(a3, " is not a function"));
            if (isReservedFeature(a3))
              throw new Error("feature ".concat(a3, " is a reserved name"));
            b[a3] = d2;
          };
          Object.keys(c.features).forEach(function(a3) {
            return d(a3);
          });
        }
        return this.plugins.push(c), c.onPlugin && "function" == typeof c.onPlugin && c.onPlugin.bind(this)(this), this;
      } }, { key: "onCustomCommand", value: function(a2, b) {
        var c, d, e, f, g, h = this;
        if ("string" == typeof a2 ? (c = a2, d = b) : (c = a2.command, d = a2.handler, e = a2.title, f = a2.description, g = a2.args), !c)
          throw new Error("A command is required");
        if (!d)
          throw new Error('A handler is required for command "'.concat(c, '"'));
        var i = this.customCommands.filter(function(a3) {
          return a3.command === c;
        });
        if (0 < i.length && i.forEach(function(a3) {
          console.log(a3), h.customCommands = h.customCommands.filter(function(b2) {
            return b2.id !== a3.id;
          }), h.send("customCommand.unregister", { id: a3.id, command: a3.command });
        }), g) {
          var j = [];
          g.forEach(function(a3) {
            if (!a3.name)
              throw new Error('A arg on the command "'.concat(c, '" is missing a name'));
            if (-1 < j.indexOf(a3.name))
              throw new Error('A arg with the name "'.concat(a3.name, '" already exists in the command "').concat(c, '"'));
            j.push(a3.name);
          });
        }
        var k = { id: this.customCommandLatestId, command: c, handler: d, title: e, description: f, args: g };
        return this.customCommandLatestId += 1, this.customCommands.push(k), this.send("customCommand.register", { id: k.id, command: k.command, title: k.title, description: k.description, args: k.args }), function() {
          h.customCommands = h.customCommands.filter(function(a3) {
            return a3.id !== k.id;
          }), h.send("customCommand.unregister", { id: k.id, command: k.command });
        };
      } }]), a;
    }();
    function createClient(a) {
      var b = new ReactotronImpl();
      return b.configure(a), b;
    }
    exports.ReactotronImpl = ReactotronImpl, exports.corePlugins = corePlugins, exports.createClient = createClient;
  }
});

export {
  require_dist
};
//# sourceMappingURL=chunk-5KF6OQG7.js.map
